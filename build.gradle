//import net.minecraftforge.gradle.common.task.SignJar

buildscript {

    repositories {
        maven {
            url = 'https://maven.minecraftforge.net'
        }
        maven {
            url "https://repo.spongepowered.org/repository/maven-public/"
            content { includeGroup "org.spongepowered" }
        }
        mavenCentral()
    }

    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "observerlib.refmap.json"
    config 'assets/observerlib/observerlib.mixins.json'
}

version = '1.18.2-1.6.0'
group = 'hellfirepvp.observerlib'
archivesBaseName = 'observerlib'
String build_version = ""

// Most likely inside Jenkins. Or homebrew environment.
// I hope you know what you do if it's the latter.
if (System.getenv("BUILD_NUMBER") != null) {
    build_version = version + ".v" + System.getenv("BUILD_NUMBER")
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {

    mappings channel: 'official', version: '1.18.2'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
            property 'forge.enabledGameTestNamespaces', 'observerlib'
            property 'Dmixin.debug.export', 'true'

            mods {
                observerlib {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
            property 'forge.enabledGameTestNamespaces', 'observerlib'
            property 'Dmixin.debug.export', 'true'

            mods {
                observerlib {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
            property 'forge.enabledGameTestNamespaces', 'observerlib'
            property 'Dmixin.debug.export', 'true'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
            property 'forge.enabledGameTestNamespaces', 'observerlib'
            property 'Dmixin.debug.export', 'true'

            args "-mixin.config=assets/observerlib/observerlib.mixins.json"
            args '--mod', 'observerlib', '--all', '--output', file('src/generated/resources/')

            mods {
                observerlib {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {

    minecraft 'net.minecraftforge:forge:1.18.2-40.2.0'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
/*
//Sign jar from flatfile if present
task signJar(type: SignJar, dependsOn: jar) {
    onlyIf {
        project.hasProperty('keyStore')
    }
    if (project.hasProperty('keyStore')) {
        keyStore = project.keyStore
        alias = project.alias
        storePass = project.storePass
        keyPass = project.keyPass
        inputFile = jar.archivePath
        outputFile = jar.archivePath
    } else {
        logger.warn("No key store found, not signing the output jar\n")
    }
}

build.dependsOn signJar*/

jar {
    manifest {
        attributes([
                "Specification-Title": "observerlib",
                "Specification-Vendor": "hellfirepvp",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" : "hellfirepvp",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

task sourcesJar(type: Jar) {
    classifier = "sources"
    from sourceSets.main.allJava
}

task deobfJar(type: Jar) {
    classifier = "deobf"
    from sourceSets.main.output
}

artifacts {
    archives sourcesJar
    archives deobfJar
}

publish.dependsOn(project.tasks.getByName("assemble"))
publish.mustRunAfter(project.tasks.getByName("build"))

publishing {
    tasks.publish.dependsOn build
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version build_version
            from components.java
        }
    }

    repositories {
        maven {
            url "file://" + System.getenv("LOCAL_MAVEN")
        }
    }
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}